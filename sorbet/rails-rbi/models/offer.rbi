# This is an autogenerated file for dynamic methods in Offer
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Offer::Relation < ActiveRecord::Relation
  include Offer::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Offer)
end

class Offer < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Offer::NamedScope
  Elem = type_template(fixed: Offer)

  sig { returns(T.nilable(Integer)) }
  def amount_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def amount_cents=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T.nilable(String)) }
  def creator_id(); end

  sig { params(value: T.nilable(String)).void }
  def creator_id=(value); end

  sig { returns(T.nilable(String)) }
  def from_id(); end

  sig { params(value: T.nilable(String)).void }
  def from_id=(value); end

  sig { returns(T.nilable(String)) }
  def from_type(); end

  sig { params(value: T.nilable(String)).void }
  def from_type=(value); end

  sig { returns(T.untyped) }
  def id(); end

  sig { params(value: T.untyped).void }
  def id=(value); end

  sig { returns(T.nilable(String)) }
  def note(); end

  sig { params(value: T.nilable(String)).void }
  def note=(value); end

  sig { returns(T.nilable(Order)) }
  def order(); end

  sig { params(value: T.nilable(Order)).void }
  def order=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def order_id(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def order_id=(value); end

  sig { returns(T.nilable(Offer)) }
  def responds_to(); end

  sig { params(value: T.nilable(Offer)).void }
  def responds_to=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def responds_to_id(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def responds_to_id=(value); end

  sig { returns(T.nilable(Integer)) }
  def shipping_total_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def shipping_total_cents=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def should_remit_sales_tax(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def should_remit_sales_tax=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def should_remit_sales_tax?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def submitted_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def submitted_at=(value); end

  sig { returns(T.nilable(Integer)) }
  def tax_total_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def tax_total_cents=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(PaperTrail::OfferVersion::Relation) }
  def versions(); end

  sig { params(value: T.any(T::Array[PaperTrail::OfferVersion], PaperTrail::OfferVersion::Relation)).void }
  def versions=(value); end

end


module Offer::NamedScope
  extend T::Sig

  sig { returns(Offer::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Offer::Relation) }
  def pending(*args); end

  sig { params(args: T.untyped).returns(Offer::Relation) }
  def submitted(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Offer::Relation) }
  def except(*args, block); end

end

