# This is an autogenerated file for dynamic methods in Order
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Order::Relation < ActiveRecord::Relation
  include Order::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Order)
end

class Order < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Order::NamedScope
  Elem = type_template(fixed: Order)

  sig { returns(AdminNote::Relation) }
  def admin_notes(); end

  sig { params(value: T.any(T::Array[AdminNote], AdminNote::Relation)).void }
  def admin_notes=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def assisted(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def assisted=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def assisted?(*args); end

  sig { returns(T.nilable(String)) }
  def buyer_id(); end

  sig { params(value: T.nilable(String)).void }
  def buyer_id=(value); end

  sig { returns(T.nilable(String)) }
  def buyer_phone_number(); end

  sig { params(value: T.nilable(String)).void }
  def buyer_phone_number=(value); end

  sig { returns(T.nilable(Integer)) }
  def buyer_total_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def buyer_total_cents=(value); end

  sig { returns(T.nilable(String)) }
  def buyer_type(); end

  sig { params(value: T.nilable(String)).void }
  def buyer_type=(value); end

  sig { returns(T.nilable(String)) }
  def code(); end

  sig { params(value: T.nilable(String)).void }
  def code=(value); end

  sig { returns(T.nilable(Integer)) }
  def commission_fee_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def commission_fee_cents=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def commission_rate(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def commission_rate=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T.nilable(String)) }
  def credit_card_id(); end

  sig { params(value: T.nilable(String)).void }
  def credit_card_id=(value); end

  sig { returns(T.nilable(String)) }
  def currency_code(); end

  sig { params(value: T.nilable(String)).void }
  def currency_code=(value); end

  sig { returns(T.nilable(String)) }
  def external_charge_id(); end

  sig { params(value: T.nilable(String)).void }
  def external_charge_id=(value); end

  sig { returns(T.nilable(String)) }
  def fulfillment_type(); end

  sig { params(value: T.nilable(String)).void }
  def fulfillment_type=(value); end

  sig { returns(T.untyped) }
  def id(); end

  sig { params(value: T.untyped).void }
  def id=(value); end

  sig { returns(T.nilable(Integer)) }
  def items_total_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def items_total_cents=(value); end

  sig { returns(T.nilable(Offer)) }
  def last_offer(); end

  sig { params(value: T.nilable(Offer)).void }
  def last_offer=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def last_offer_id(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def last_offer_id=(value); end

  sig { returns(LineItem::Relation) }
  def line_items(); end

  sig { params(value: T.any(T::Array[LineItem], LineItem::Relation)).void }
  def line_items=(value); end

  sig { returns(String) }
  def mode(); end

  sig { params(value: String).void }
  def mode=(value); end

  sig { returns(Offer::Relation) }
  def offers(); end

  sig { params(value: T.any(T::Array[Offer], Offer::Relation)).void }
  def offers=(value); end

  sig { returns(T.nilable(String)) }
  def original_user_agent(); end

  sig { params(value: T.nilable(String)).void }
  def original_user_agent=(value); end

  sig { returns(T.nilable(String)) }
  def original_user_ip(); end

  sig { params(value: T.nilable(String)).void }
  def original_user_ip=(value); end

  sig { returns(String) }
  def payment_method(); end

  sig { params(value: String).void }
  def payment_method=(value); end

  sig { returns(T.nilable(String)) }
  def seller_id(); end

  sig { params(value: T.nilable(String)).void }
  def seller_id=(value); end

  sig { returns(T.nilable(Integer)) }
  def seller_total_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def seller_total_cents=(value); end

  sig { returns(T.nilable(String)) }
  def seller_type(); end

  sig { params(value: T.nilable(String)).void }
  def seller_type=(value); end

  sig { returns(T.nilable(String)) }
  def shipping_address_line1(); end

  sig { params(value: T.nilable(String)).void }
  def shipping_address_line1=(value); end

  sig { returns(T.nilable(String)) }
  def shipping_address_line2(); end

  sig { params(value: T.nilable(String)).void }
  def shipping_address_line2=(value); end

  sig { returns(T.nilable(String)) }
  def shipping_city(); end

  sig { params(value: T.nilable(String)).void }
  def shipping_city=(value); end

  sig { returns(T.nilable(String)) }
  def shipping_country(); end

  sig { params(value: T.nilable(String)).void }
  def shipping_country=(value); end

  sig { returns(T.nilable(String)) }
  def shipping_name(); end

  sig { params(value: T.nilable(String)).void }
  def shipping_name=(value); end

  sig { returns(T.nilable(String)) }
  def shipping_postal_code(); end

  sig { params(value: T.nilable(String)).void }
  def shipping_postal_code=(value); end

  sig { returns(T.nilable(String)) }
  def shipping_region(); end

  sig { params(value: T.nilable(String)).void }
  def shipping_region=(value); end

  sig { returns(T.nilable(Integer)) }
  def shipping_total_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def shipping_total_cents=(value); end

  sig { returns(String) }
  def state(); end

  sig { params(value: String).void }
  def state=(value); end

  sig { returns(T.nilable(DateTime)) }
  def state_expires_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def state_expires_at=(value); end

  sig { returns(StateHistory::Relation) }
  def state_histories(); end

  sig { params(value: T.any(T::Array[StateHistory], StateHistory::Relation)).void }
  def state_histories=(value); end

  sig { returns(T.nilable(String)) }
  def state_reason(); end

  sig { params(value: T.nilable(String)).void }
  def state_reason=(value); end

  sig { returns(T.nilable(DateTime)) }
  def state_updated_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def state_updated_at=(value); end

  sig { returns(T.nilable(Integer)) }
  def tax_total_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def tax_total_cents=(value); end

  sig { returns(T.nilable(Integer)) }
  def transaction_fee_cents(); end

  sig { params(value: T.nilable(Integer)).void }
  def transaction_fee_cents=(value); end

  sig { returns(Transaction::Relation) }
  def transactions(); end

  sig { params(value: T.any(T::Array[Transaction], Transaction::Relation)).void }
  def transactions=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(PaperTrail::OrderVersion::Relation) }
  def versions(); end

  sig { params(value: T.any(T::Array[PaperTrail::OrderVersion], PaperTrail::OrderVersion::Relation)).void }
  def versions=(value); end

end


module Order::NamedScope
  extend T::Sig

  sig { returns(Order::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Order::Relation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Order::Relation) }
  def approved(*args); end

  sig { params(args: T.untyped).returns(Order::Relation) }
  def by_last_admin_note(*args); end

  sig { params(args: T.untyped).returns(Order::Relation) }
  def pending(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Order::Relation) }
  def except(*args, block); end

end

